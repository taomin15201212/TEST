var mjx = function() {
	var cls = function() {
		this.separator = ","
	};
	cls.prototype = {
		ForDight: function(numberRound, roundDigit) {
			if (numberRound >= 0) return parseInt(numberRound * Math.pow(10, roundDigit) + .5) / Math.pow(10, roundDigit);
			else return -parseInt(-numberRound * Math.pow(10, roundDigit) + .5) / Math.pow(10, roundDigit)
		},
		timestamp: function() {
			return (new Date).getTime()
		},
		timestamptodate: function(timstamp) {
			return new Date(timstamp)
		},
		formatdate: function(dt, format) {
			var o = {
				"M+": dt.getMonth() + 1,
				"d+": dt.getDate(),
				"h+": dt.getHours(),
				"m+": dt.getMinutes(),
				"s+": dt.getSeconds(),
				"q+": Math.floor((dt.getMonth() + 3) / 3),
				S: dt.getMilliseconds()
			};
			if (/(y+)/.test(format)) {
				format = format.replace(RegExp.$1, (dt.getFullYear() + "").substr(4 - RegExp.$1.length))
			}
			for (var k in o) {
				if (new RegExp("(" + k + ")").test(format)) {
					format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length))
				}
			}
			return format
		},
		formartnumber: function(number, length) {
			var numberstring = number + "";
			while (numberstring.length < length) {
				numberstring = "0" + numberstring
			}
			return numberstring
		},
		formarttimeZH: function(seconds) {
			var minute = parseInt(seconds / 60, 10);
			var sec = seconds % 60;
			var result = "";
			if (minute > 0) {
				result += minute + "分"
			}
			if (sec >= 0) {
				result += sec + "秒"
			}
			return result
		},
		formarttime: function(seconds) {
			var minute = parseInt(seconds / 60, 10);
			var sec = seconds % 60;
			var result = "";
			if (minute == 0) {
				result += "00"
			} else {
				if (minute < 10) {
					result += "0" + minute
				} else {
					result += minute
				}
			}
			result += ":";
			if (sec < 10) {
				result += "0" + sec
			} else {
				result += sec
			}
			return result
		},
		isInteger: function(t) {
			var re = /^[1-9]|[1-9][0-9]$/;
			if (t.length == 0) {
				return false
			}
			return re.test(t)
		},
		isArray: function(o) {
			return Object.prototype.toString.call(o) === "[object Array]"
		},
		intArrayInArrayToArray: function(array) {
			var _ = [];
			for (var i = 0, l = array.length; i < l; i++) {
				for (var j = array[i][0], max = array[i][1]; j <= max; j++) {
					_.push(j)
				}
			}
			return _
		},
		getKeysObjectArray: function(array, key) {
			var result = [];
			for (var i = 0, l = array.length; i < l; i++) {
				result.push(array[i][key])
			}
			return result
		},
		getKeysObjectArrayByKey: function(array, findkey, searchkey, searchvalue) {
			var result = [];
			for (var i = 0, l = array.length; i < l; i++) {
				if (array[i][searchkey] == searchvalue) {
					result.push(array[i][findkey])
				}
			}
			return result
		},
		concatObjectArray: function(key, objectArrayArray) {
			var keyarray = [];
			var result = [];
			for (var i = 0, l = objectArrayArray.length; i < l; i++) {
				for (var j = 0, jl = objectArrayArray[i].length; j < jl; j++) {
					var item = objectArrayArray[i][j];
					if (keyarray.indexOf(item[key]) < 0) {
						result.push(item);
						keyarray.push(item[key])
					}
				}
			}
			return result
		},
		removeArrayRepeat: function(arr) {
			var result = [];
			for (var i = 0, l = arr.length; i < l; i++) {
				if (result.indexOf(arr[i]) < 0) {
					result.push(arr[i])
				}
			}
			return result
		},
		removeArrayArray: function(bigarray, smallarray) {
			var reuslt = [];
			for (var i = 0, l = bigarray.length; i < l; i++) {
				if (smallarray.indexOf(bigarray[i]) < 0) {
					reuslt.push(bigarray[i])
				}
			}
			return reuslt
		},
		removeObjectArrayRepeat: function(arr, key) {
			var _key_array_ = [];
			var result = [];
			for (var i = 0, l = arr.length; i < l; i++) {
				if (_key_array_.indexOf(arr[i][key]) < 0) {
					_key_array_.push(arr[i][key]);
					result.push(arr[i])
				}
			}
			return result
		},
		removeObjectArrayByKey: function(arr, key, value) {
			for (var i = 0, l = arr.length; i < l; i++) {
				if (arr[i][key] == value) {
					arr.splice(i, 1);
					break
				}
			}
		},
		bindTemp: function(temphtml, jsonData) {
			g = this;
			for (var o in jsonData) {
				temphtml = g.replaceAll(temphtml, "{" + o + "}", jsonData[o])
			}
			return temphtml
		},
		bindTempList: function(temphtml, jsonDataArray) {
			var htmlArray = [];
			var itemhtml;
			for (var i = 0, l = jsonDataArray.length; i < l; i++) {
				itemhtml = temphtml;
				for (var o in jsonDataArray[i]) {
					itemhtml = this.replaceAll(itemhtml, "{" + o + "}", jsonDataArray[i][o])
				}
				htmlArray.push(itemhtml)
			}
			return htmlArray.join("")
		},
		replaceAll: function(str, oldString, newString) {
			return str.replace(new RegExp(oldString, "gm"), newString)
		},
		stringToArray: function(str) {
			if (str == "") {
				return []
			}
			return str.split(this.separator)
		},
		arrayToString: function(arr) {
			return arr.join(this.separator)
		},
		stringToObject: function(str) {
			if (str == "") {
				return {}
			}
			return JSON.parse(str)
		},
		stringToObjectArray: function(str) {
			if (str == "") {
				return []
			}
			return JSON.parse(str)
		},
		objectToString: function(json) {
			return JSON.stringify(json)
		},
		getObjectInArray: function(array, key, value) {
			for (var i = 0, l = array.length; i < l; i++) {
				if (array[i][key] == value) {
					return array[i]
				}
			}
			return null
		},
		inObjectArray: function(array, key, value) {
			return this.getObjectInArray(array, key, value) != null
		},
		getObjectArrayCountByKey: function(array, key, newkey, totalkey) {
			var json = {};
			var keyarray = [];
			var arraylength = array.length;
			for (var i = 0, l = arraylength; i < l; i++) {
				if (keyarray.indexOf(array[i][key]) < 0) {
					json[newkey + "" + array[i][key]] = 1;
					keyarray.push(array[i][key])
				} else {
					json[newkey + "" + array[i][key]]++
				}
			}
			if (typeof totalkey != "undefined") {
				json[newkey + totalkey] = arraylength
			}
			return json
		},
		getObjectArrayAllCountByKey: function(array, key, values, newkey, totalkey) {
			var json = this.getObjectArrayCountByKey(array, key, newkey, totalkey);
			for (var i = 0, l = values.length; i < l; i++) {
				if (typeof json[newkey + "" + values[i]] == "undefined") {
					json[newkey + "" + values[i]] = 0
				}
			}
			return json
		},
		randomOrderArray: function(arr) {
			var len = arr.length;
			for (var i = 0; i < len; i++) {
				var iRand = parseInt(len * Math.random(), 10);
				var temp = arr[i];
				arr[i] = arr[iRand];
				arr[iRand] = temp
			}
		}
	};
	return new cls
}();
mjx.dialog = function() {
	var cls = function() {
		this.zhezhaoid = "mjx_main_zhezhao";
		this.top = 100
	};
	cls.prototype = {
		_yesnoDialog: function(title, content, btnArray) {
			var _g_ = this;
			var template = '<div class="dialog" id="' + _g_.dialog_id + '"><div class="begin_top"><div class="begin">' + title + '</div><div class="mt goon">' + content + "</div></div>" + '<div class="begin_bottom"><div class="cancel">' + btnArray.no + '</div><div class="certain">' + btnArray.yes + "</div></div></div>";
			$("body").append(template);
			$("#" + _g_.dialog_id).css({
				top: _g_.top,
				display: "block"
			});
			$("#" + _g_.dialog_id + " .cancel").bind("click", function() {
				_g_.dialog_close();
				btnArray.nocallback()
			});
			$("#" + _g_.dialog_id + " .certain").bind("click", function() {
				_g_.dialog_close();
				btnArray.yescallback()
			})
		},
		_singleDialog: function(title, content, btnObject) {
			var _g_ = this;
			var template = '<div class="dialog" id="' + _g_.dialog_id + '"><div class="begin_top"><div class="begin">' + title + '</div><div class="mt goon">' + content + "</div></div>" + '<div class="begin_bottom"><div class="certain singlebtn" style="width:100%;line-height:40px;">' + btnObject.text + "</div></div></div>";
			$("body").append(template);
			$("#" + _g_.dialog_id).css({
				top: _g_.top,
				display: "block"
			});
			$("#" + _g_.dialog_id + " .singlebtn").bind("click", function() {
				_g_.dialog_close();
				btnObject.callback()
			})
		},
		dialog: function(title, content, btnArray, isclose) {
			isclose = isclose || false;
			var _g_ = this;
			if (typeof _g_.dialog_id == "undefined") {
				_g_.dialog_id = "win_dialog_" + mjx.timestamp()
			}
			_g_.dialog_close();
			if (!isclose) {
				_g_.top = parseInt($(window).height() * .3, 10);
				if (btnArray.yes) {
					this._yesnoDialog(title, content, btnArray)
				} else if (btnArray.text) {
					this._singleDialog(title, content, btnArray)
				}
				_g_.showzhezhao()
			}
		},
		dialog_close: function() {
			$("#" + this.dialog_id).remove();
			this.closezhezhao()
		},
		showzhezhao: function() {
			var _findobj = "#" + this.zhezhaoid;
			var _h_ = Math.max($(window).height(), $("body").height());
			var zzc = '<div id="' + this.zhezhaoid + '" class="zhezhao" style="height:' + _h_ + 'px"></div>';
			$("body").append(zzc);
			$(_findobj).show();
			$(_findobj).bind("touchmove", function(e) {
				e.preventDefault()
			})
		},
		closezhezhao: function() {
			var _findobj = "#" + this.zhezhaoid;
			if ($(_findobj).length != 0) {
				$(_findobj).remove()
			}
		},
		getzhezhaoid: function() {
			return this.zhezhaoid
		}
	};
	return new cls
}();
mjx.db = function(mjx) {
	var db = function() {
		this.keyprev = "mjx_"
	};
	db.prototype = {
		_createkey: function(key) {
			return this.keyprev + key
		},
		_islocaldata: function(key) {
			return key.indexOf(this.keyprev) == 0
		},
		save: function(key, value) {
			var _k = this._createkey(key);
			var tp = typeof value;
			if (tp == "string" || tp == "number") {
				localStorage.setItem(_k, value)
			}
		},
		get: function(key) {
			var _k = this._createkey(key);
			return localStorage.getItem(_k) || ""
		},
		"delete": function(key) {
			var _k = this._createkey(key);
			localStorage.removeItem(_k)
		},
		clear: function() {
			var allstorage = window.localStorage;
			for (var i = 0; i < allstorage.length; i++) {
				var _key = allstorage.key(i);
				if (this._islocaldata(_key)) {
					localStorage.removeItem(_key)
				}
			}
		}
	};
	return new db
}(mjx);